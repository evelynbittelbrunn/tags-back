# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

#Definicao do fluxo de trabalho
name: CRUD usuários em Java - Deploy Ec2 

# Especifica que o workflow será acionado apenas quando 
# houver um push na branch "master"
on:
  push:
    branches: [ "master" ]

#Definicao dos jobs do workflow

jobs:
  EC2-Deploy:
    runs-on: ubuntu-latest # Definicao do ambiente
    environment: #Define a configuração de ambiente para este job
      name: AWS

    steps:
    - uses: actions/checkout@v3 # Action do proprio GitHub para clonar o repositório.
    - name: Compile
      run: mvn clean package # Comando que será executado neste passo, responsável por compilar o projeto Java usando o Maven e gerar o pacote.

    - id: deploy
      uses: bitovi/github-actions-deploy-docker-to-ec2@v1.0.0 #Action para realizar o deploy de contêineres Docker em instâncias EC2.
      with:
        checkout: false
        aws_access_key_id: ${{secrets.AWS_ACCESS_KEY_ID}} # Define a chave de acesso da AWS para autenticação, armazenada nos secrets do repositório.
        aws_secret_access_key: ${{secrets.SECRET_ACCESS_KEY}} #Define a chave secreta de acesso da AWS para autenticação, armazenada nos secrets do repositório.
        aws_elb_app_port: 8080 #Define a porta do aplicativo que será exposta no ELB (Elastic Load Balancer) da AWS.
